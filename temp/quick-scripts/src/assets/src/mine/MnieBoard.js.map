{"version":3,"sources":["assets\\src\\mine\\MnieBoard.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { Piece } from \"./MinePiece\";\nimport { PIECE_TYPE, PIECE_STATE } from \"./MineConstans\";\nimport { MineScene } from \"./MineScene\";\n\nconst { ccclass, property, executeInEditMode } = cc._decorator;\n\n@ccclass\n@executeInEditMode\nexport class Board extends cc.Component {\n\n    @property(cc.Prefab)\n    private piecePrefab: cc.Prefab = null;\n    @property(cc.Integer)\n    private colNum: number = 9;\n    @property(cc.Integer)\n    private colSpace: number = 9;\n    @property(cc.Float)\n    private pressTime: number = 1;\n\n    private colWidth: number = 80;\n    private pieceMap: Array<Array<Piece>>;\n    private touchingPiece: Piece = null;\n    private touchStartTime = 0;\n    private bombNum = 0;\n    private flagNum = 0;\n    private mineScene: MineScene = null;\n\n    onLoad() {\n        this.colWidth = (this.node.width - this.colSpace * (this.colNum + 1)) / this.colNum;\n        this.node.removeAllChildren();\n        this.pieceMap = [];\n        for (let x = 0; x < this.colNum; x++) {\n            this.pieceMap[x] = [];\n            for (let y = 0; y < this.colNum; y++) {\n                let pieceNode = cc.instantiate(this.piecePrefab);\n                this.node.addChild(pieceNode);\n                pieceNode.x = x * (this.colWidth + this.colSpace) + this.colSpace;\n                pieceNode.y = y * (this.colWidth + this.colSpace) + this.colSpace;\n                pieceNode.width = this.colWidth;\n                pieceNode.height = this.colWidth;\n                this.pieceMap[x][y] = pieceNode.getComponent(Piece);\n                this.pieceMap[x][y].init(x, y, PIECE_TYPE.OPEN0, PIECE_STATE.OPEN);\n                pieceNode.on(cc.Node.EventType.TOUCH_START, () => {\n                    this.onPieceTouchStart(this.pieceMap[x][y]);\n                }, this);\n                pieceNode.on(cc.Node.EventType.TOUCH_END, () => {\n                    this.onPieceTouchEnd(this.pieceMap[x][y]);\n                }, this);\n            }\n        }\n    }\n\n    public init(mineScene: MineScene) {\n        this.mineScene = mineScene;\n    }\n\n    private onPieceTouchStart(piece: Piece) {\n        this.touchStartTime = new Date().getTime();\n        this.touchingPiece = piece;\n    }\n\n    private onPieceTouchEnd(piece: Piece) {\n        let touchEndTime = new Date().getTime();\n        if (touchEndTime - this.touchStartTime > this.pressTime * 1000) {\n            this.mineScene.onPressPiece(piece);\n        } else {\n            this.mineScene.onClickPiece(piece);\n        }\n    }\n\n    public openPiece(piece: Piece) {\n        if (piece.state === PIECE_STATE.PENDING) {\n            if (piece.type === PIECE_TYPE.BOMB) {\n                piece.state = PIECE_STATE.OPEN;\n                this.showAll();\n                this.mineScene.overGame(false);\n            } else {\n                this.showBlank(piece);\n                this.judgeWin();\n            }\n        }\n    }\n\n    public flagPiece(piece: Piece) {\n        if (piece.state === PIECE_STATE.PENDING) {\n            piece.state = PIECE_STATE.FLAG;\n            this.flagNum--;\n            if (this.flagNum === 0) {\n                let isWin = this.showRest();\n                this.mineScene.overGame(isWin);\n            }\n        } else if (piece.state === PIECE_STATE.FLAG) {\n            piece.state = PIECE_STATE.PENDING;\n            this.flagNum++;\n        }\n    }\n\n    public getBombNum() {\n        return this.bombNum;\n    }\n\n    public getFlagNum() {\n        return this.flagNum;\n    }\n\n    public getMaxLevel() {\n        return this.colNum * this.colNum - 1;\n    }\n\n    private judgeWin() {\n        let openNum = 0;\n        for (let x = 0; x < this.colNum; x++) {\n            for (let y = 0; y < this.colNum; y++) {\n                if (this.pieceMap[x][y].state === PIECE_STATE.OPEN) {\n                    openNum++;\n                }\n            }\n        }\n        if (openNum === this.colNum ** 2 - this.bombNum) {\n            this.mineScene.overGame(true);\n        }\n    }\n\n    public reset(level: number) {\n        this.resetBlank();\n        this.resetBombs(level);\n        this.resetHintsAndMask();\n    }\n\n    private resetBlank() {\n        for (let x = 0; x < this.colNum; x++) {\n            for (let y = 0; y < this.colNum; y++) {\n                this.pieceMap[x][y].type = PIECE_TYPE.OPEN0;\n            }\n        }\n    }\n\n    private resetBombs(bombNum: number) {\n        this.bombNum = bombNum;\n        this.flagNum = bombNum;\n        let pieceMapIndex = [];\n        for (let x = 0; x < this.colNum; x++) {\n            for (let y = 0; y < this.colNum; y++) {\n                pieceMapIndex.push({ x: x, y: y });\n            }\n        }\n        for (let n = 0; n < bombNum; n++) {\n            let i = Math.random() * pieceMapIndex.length | 0;\n            let piecePos = pieceMapIndex[i];\n            cc.log(piecePos);\n            this.pieceMap[piecePos.x][piecePos.y].type = PIECE_TYPE.BOMB;\n            pieceMapIndex.splice(i, 1);\n        }\n    }\n\n    private resetHintsAndMask() {\n        for (let x = 0; x < this.colNum; x++) {\n            for (let y = 0; y < this.colNum; y++) {\n                if (this.pieceMap[x][y].type !== PIECE_TYPE.BOMB) {\n                    let roundPieces = this.getRoundPieces(x, y);\n                    let roundBombs = 0;\n                    roundPieces.forEach((piece) => {\n                        if (piece.type === PIECE_TYPE.BOMB) {\n                            roundBombs++;\n                        }\n                    });\n                    this.pieceMap[x][y].type = roundBombs;\n                }\n                this.pieceMap[x][y].state = PIECE_STATE.PENDING;\n            }\n        }\n    }\n\n    private getRoundPieces(x, y): Array<Piece> {\n        let roundPieces: Piece[] = [];\n        // left\n        if (x >= 1) {\n            roundPieces.push(this.pieceMap[x - 1][y]);\n        }\n        // left top\n        if (x >= 1 && y <= this.colNum - 2) {\n            roundPieces.push(this.pieceMap[x - 1][y + 1]);\n        }\n        // top\n        if (y <= this.colNum - 2) {\n            roundPieces.push(this.pieceMap[x][y + 1]);\n        }\n        // right top\n        if (x <= this.colNum - 2 && y <= this.colNum - 2) {\n            roundPieces.push(this.pieceMap[x + 1][y + 1]);\n        }\n        // right\n        if (x <= this.colNum - 2) {\n            roundPieces.push(this.pieceMap[x + 1][y]);\n        }\n        // right bottom\n        if (x <= this.colNum - 2 && y >= 1) {\n            roundPieces.push(this.pieceMap[x + 1][y - 1]);\n        }\n        // bottom\n        if (y >= 1) {\n            roundPieces.push(this.pieceMap[x][y - 1]);\n        }\n        // left bottom\n        if (x >= 1 && y >= 1) {\n            roundPieces.push(this.pieceMap[x - 1][y - 1]);\n        }\n        return roundPieces;\n    }\n\n    private showBlank(piece: Piece) {\n        let testPieces: Array<Piece> = [piece];\n        while (testPieces.length > 0) {\n            let testPiece = testPieces.pop();\n            if (testPiece.type === PIECE_TYPE.OPEN0) {\n                testPiece.state = PIECE_STATE.OPEN;\n                let roundPieces = this.getRoundPieces(testPiece.x, testPiece.y);\n                roundPieces.forEach(p => {\n                    if (p.state === PIECE_STATE.PENDING) {\n                        testPieces.push(p);\n                    }\n                });\n            } else if (testPiece.type >= PIECE_TYPE.OPEN1 && testPiece.type <= PIECE_TYPE.OPEN8) {\n                testPiece.state = PIECE_STATE.OPEN;\n            }\n        }\n    }\n\n    // 失败后显示全部格子\n    private showAll() {\n        for (let x = 0; x < this.colNum; x++) {\n            for (let y = 0; y < this.colNum; y++) {\n                this.pieceMap[x][y].state = PIECE_STATE.OPEN;\n            }\n        }\n    }\n\n    // 旗子插满后显示其他没有插旗的地方\n    private showRest(): boolean {\n        let isWin = true;\n        for (let x = 0; x < this.colNum; x++) {\n            for (let y = 0; y < this.colNum; y++) {\n                if (this.pieceMap[x][y].state === PIECE_STATE.PENDING) {\n                    this.pieceMap[x][y].state = PIECE_STATE.OPEN;\n                    if (this.pieceMap[x][y].type === PIECE_TYPE.BOMB) {\n                        isWin = false;\n                    }\n                }\n            }\n        }\n        return isWin;\n    }\n}"]}