{"version":3,"sources":["assets\\src\\get47\\Get47Board.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { Get47Scene } from \"./Get47Scene\";\nimport { Piece } from \"./Get47Piece\";\nimport { DIR } from \"./Get47Constants\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport class Get47Board extends cc.Component {\n\n    @property(cc.Integer)\n    private colsNum: number = 7;\n    @property(cc.Integer)\n    private rowsNum: number = 7;\n    @property(cc.Integer)\n    private padding: number = 5;\n    @property(cc.Integer)\n    private spacing: number = 5;\n    @property(cc.Prefab)\n    private piecePrefab: cc.Prefab = null;\n\n    private pieceWidth: number;\n    private get47Scene: Get47Scene = null;\n    private pieceMap: Array<Array<Piece>>;\n    private runningAction: boolean = false;\n    private score: number = 0;\n\n    private inputDir: number = 0; // 手机倾斜方向，1向右分数相加，-1向左分数相减\n\n    public init(get47Scene: Get47Scene) {\n        this.get47Scene = get47Scene;\n        this.pieceWidth = (this.node.width - this.padding * 2 - this.spacing * (this.colsNum - 1)) / this.colsNum;\n    }\n\n    public reset() {\n        this.node.removeAllChildren();\n        this.pieceMap = [];\n        for (let x = 0; x < this.colsNum; x++) {\n            this.pieceMap[x] = [];\n            for (let y = 0; y < this.rowsNum; y++) {\n                let pieceNode = cc.instantiate(this.piecePrefab);\n                this.node.addChild(pieceNode);\n                pieceNode.width = this.pieceWidth;\n                pieceNode.height = this.pieceWidth;\n                pieceNode.position = cc.v2(this.padding + x * (this.pieceWidth + this.spacing),\n                    this.padding + y * (this.pieceWidth + this.spacing));\n                let piece = pieceNode.getComponent(Piece);\n                piece.init(x, y);\n                this.addTouchEvent(piece);\n                this.pieceMap[x][y] = piece;\n            }\n        }\n        this.deletePieces();\n    }\n\n    private addTouchEvent(piece: Piece) {\n        let f = (e: cc.Event.EventTouch) => {\n            if (this.runningAction) {\n                return;\n            }\n            let p1 = e.getStartLocation();\n            let p2 = e.getLocation();\n            let dir: DIR;\n            if (Math.abs(p2.x - p1.x) > Math.abs(p2.y - p1.y)) {\n                if (p2.x > p1.x) {\n                    dir = DIR.RIGHT;\n                } else {\n                    dir = DIR.LEFT;\n                }\n            } else {\n                if (p2.y > p1.y) {\n                    dir = DIR.UP;\n                } else {\n                    dir = DIR.DOWN;\n                }\n            }\n            this.inputDir = 0;\n            this.get47Scene.onPieceTouch(piece, dir);\n        };\n        piece.node.on(cc.Node.EventType.TOUCH_END, f, this);\n        piece.node.on(cc.Node.EventType.TOUCH_CANCEL, f, this);\n\n    }\n\n    public tryExchange(piece: Piece, dir: DIR) {\n        let neighborPiece = this.getNeighborPiece(piece, dir);\n        if (neighborPiece === null) {\n            return;\n        }\n        this.runningAction = true;\n\n        this.exchangeTwoPiecesState(piece, neighborPiece);\n        let hLines = this.getHorizontalLines();\n        let vLines = this.getVerticalLines();\n        if (hLines.length + vLines.length > 0) {\n            this.exchangeTwoPiecesPosIndex(piece, neighborPiece);\n            let finished = 0;\n            let total = 2;\n            let self = this;\n            let action1 = cc.sequence(cc.moveTo(0.15, piece.posIndex),\n                cc.callFunc(() => {\n                    finished++;\n                    if (finished === total) {\n                        this.runningAction = false;\n                        this.deletePieces();\n                    }\n                })\n            );\n            let action2 = cc.sequence(cc.moveTo(0.15, neighborPiece.posIndex),\n                cc.callFunc(() => {\n                    finished++;\n                    if (finished === total) {\n                        this.runningAction = false;\n                        this.deletePieces();\n                    }\n                })\n            );\n            piece.node.runAction(action1);\n            neighborPiece.node.runAction(action2);\n        } else {\n            this.exchangeTwoPiecesState(piece, neighborPiece);\n            let finished = 0;\n            let total = 2;\n            let tilePos = piece.node.position;\n            let neighborTilePos = neighborPiece.node.position;\n            let action1 = cc.sequence(cc.moveTo(0.1, neighborTilePos), cc.moveTo(0.1, tilePos),\n                cc.callFunc(() => {\n                    finished++;\n                    if (finished === total) {\n                        this.runningAction = false;\n                    }\n                })\n            );\n            let action2 = cc.sequence(cc.moveTo(0.1, tilePos), cc.moveTo(0.1, neighborTilePos),\n                cc.callFunc(() => {\n                    finished++;\n                    if (finished === total) {\n                        this.runningAction = false;\n                    }\n                })\n            );\n            piece.node.runAction(action1);\n            neighborPiece.node.runAction(action2);\n        }\n\n    }\n\n    private exchangeTwoPiecesState(piece1: Piece, piece2: Piece) {\n        this.pieceMap[piece1.x][piece1.y] = piece2;\n        this.pieceMap[piece2.x][piece2.y] = piece1;\n        [piece1.x, piece2.x] = [piece2.x, piece1.x];\n        [piece1.y, piece2.y] = [piece2.y, piece1.y];\n    }\n\n    private exchangeTwoPiecesPosIndex(piece1: Piece, piece2: Piece) {//交换位置信息，实际位置没有改变\n        [piece1.posIndex, piece2.posIndex] = [piece2.posIndex, piece1.posIndex]\n    }\n\n    private deletePieces() {\n        this.runningAction = true;\n        let hLines = this.getHorizontalLines();\n        let vLines = this.getVerticalLines();\n        if (hLines.length + vLines.length === 0) {\n            this.runningAction = false;\n            return;\n        }\n        let addNumber = 0;//横加竖减\n        let minusNumber = 0;\n        let lines: Array<Piece> = [];\n        for (let piece of hLines) {\n            addNumber += piece.type;\n            lines.push(piece);\n        }\n        for (let vPiece of vLines) {\n            minusNumber += vPiece.type;\n            if (lines.indexOf(vPiece) === -1) {\n                lines.push(vPiece);\n            }\n        }\n        // TODO:\n        if (this.inputDir > 0) {\n            this.get47Scene.updateScore(addNumber + minusNumber);\n        } else if (this.inputDir < 0) {\n            this.get47Scene.updateScore(-addNumber - minusNumber);\n        } else {\n            this.get47Scene.updateScore(addNumber - minusNumber);\n        }\n        // this.score += (addNumber - minusNumber);\n\n        let finished = 0;\n        let total = lines.length;\n        for (let i = 0; i < total; i++) {\n            let action = cc.sequence(cc.scaleTo(0.15, 0, 0),\n                cc.callFunc(() => {\n                    finished++;\n                    if (finished === total) {\n                        this.runningAction = false;\n                        this.fallPieces();\n                    }\n                })\n            );\n            lines[i].isAlive = false;\n            lines[i].node.runAction(action);\n        }\n    }\n\n    private fallPieces() {\n        this.runningAction = true;\n        //下落\n        let isAllFall = false;\n        while (!isAllFall) {\n            isAllFall = true;\n            for (let y = 1; y < this.rowsNum; y++) {\n                for (let x = 0; x < this.colsNum; x++) {\n                    if (this.pieceMap[x][y].isAlive && !this.pieceMap[x][y - 1].isAlive) {\n                        this.exchangeTwoPiecesState(this.pieceMap[x][y], this.pieceMap[x][y - 1]);\n                        this.exchangeTwoPiecesPosIndex(this.pieceMap[x][y], this.pieceMap[x][y - 1]);\n                        isAllFall = false;\n                    }\n                }\n            }\n        }\n        let fallingPieces: Array<Piece> = [];\n        for (let x = 0; x < this.colsNum; x++) {\n            for (let y = 0; y < this.rowsNum; y++) {\n                if (this.pieceMap[x][y].posIndex !== this.pieceMap[x][y].node.position) {\n                    fallingPieces.push(this.pieceMap[x][y]);\n                }\n            }\n        }\n\n        let finished = 0;\n        let total = fallingPieces.length;\n        for (let i = 0; i < total; i++) {\n            let action = cc.sequence(cc.moveTo(0.3, fallingPieces[i].posIndex),\n                cc.callFunc(() => {\n                    finished++;\n                    if (finished == total) {\n                        this.runningAction = false;\n                        this.addPieces();\n                    }\n                })\n            );\n            fallingPieces[i].node.runAction(action);\n        }\n\n    }\n\n    private addPieces() {\n        this.runningAction = true;\n        //填补空白\n        let addingPieces: Array<Piece> = [];\n        for (let y = 0; y < this.rowsNum; y++) {\n            for (let x = 0; x < this.colsNum; x++) {\n                if (!this.pieceMap[x][y].isAlive) {\n                    addingPieces.push(this.pieceMap[x][y]);\n                }\n            }\n        }\n\n        let finished = 0;\n        let total = addingPieces.length;\n        for (let i = 0; i < total; i++) {\n            let action = cc.sequence(cc.scaleTo(0.15, 1, 1),\n                cc.callFunc(() => {\n                    finished++;\n                    if (finished == total) {\n                        this.runningAction = false;\n                        this.deletePieces();\n                    }\n                })\n            );\n            addingPieces[i].randomType();\n            addingPieces[i].isAlive = true;\n            addingPieces[i].node.runAction(action);\n        }\n    }\n\n    private getVerticalLines(): Array<Piece> {\n        let linePieces: Array<Piece> = [];\n        let count = 1;\n        for (let x = 0; x < this.colsNum; x++) {\n            for (let y = 0; y < this.rowsNum - 2; y = y + count) {\n                let piece = this.pieceMap[x][y];\n                count = 1;\n                for (let n = y + 1; n < this.rowsNum; n++) {\n                    if (this.pieceMap[x][n].type === piece.type) {\n                        count++;\n                    } else {\n                        break;\n                    }\n                }\n                if (count >= 3) {\n                    for (let i = 0; i < count; i++) {\n                        linePieces.push(this.pieceMap[x][y + i]);\n                    }\n                }\n            }\n        }\n        return linePieces;\n    }\n\n    private getHorizontalLines(): Array<Piece> {\n        let linePieces: Array<Piece> = [];\n        let count = 1;\n        for (let y = 0; y < this.rowsNum; y++) {\n            for (let x = 0; x < this.colsNum - 2; x = x + count) {\n                let piece = this.pieceMap[x][y];\n                let pieceType = piece.type;\n                count = 1;\n                for (let n = x + 1; n < this.colsNum; n++) {\n                    if (this.pieceMap[n][y].type === pieceType) {\n                        count++;\n                    } else {\n                        break;\n                    }\n                }\n                if (count >= 3) {\n                    for (let i = 0; i < count; i++) {\n                        linePieces.push(this.pieceMap[x + i][y]);\n                    }\n                }\n            }\n        }\n        return linePieces;\n    }\n\n    private getNeighborPiece(piece: Piece, dir: DIR): Piece {\n        let x = piece.x;\n        let y = piece.y;\n        switch (dir) {\n            case DIR.LEFT:\n                if (x > 0) {\n                    return this.pieceMap[x - 1][y];\n                }\n                break;\n            case DIR.RIGHT:\n                if (x < this.colsNum - 1) {\n                    return this.pieceMap[x + 1][y];\n                }\n                break;\n            case DIR.UP:\n                if (y < this.rowsNum - 1) {\n                    return this.pieceMap[x][y + 1];\n                }\n                break;\n            case DIR.DOWN:\n                if (y > 0) {\n                    return this.pieceMap[x][y - 1];\n                }\n                break;\n        }\n        return null;\n    }\n\n    public newView(input: number = 0) {\n        this.inputDir = input;\n        if (!this.runningAction) {\n            this.runningAction = true;\n            let finished = 0;\n            for (let x = 0; x < this.colsNum; x++) {\n                for (let y = 0; y < this.rowsNum; y++) {\n                    let action = cc.sequence(cc.scaleTo(0.3, 0, 0),\n                        cc.callFunc(() => {\n                            finished++;\n                            if (finished === (this.colsNum - 1) * (this.rowsNum - 1)) {\n                                this.runningAction = false;\n                                this.addPieces();\n                            }\n                        })\n                    );\n                    this.pieceMap[x][y].isAlive = false;\n                    this.pieceMap[x][y].node.runAction(action);\n                }\n            }\n        }\n    }\n}"]}