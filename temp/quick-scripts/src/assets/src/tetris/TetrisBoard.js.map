{"version":3,"sources":["assets\\src\\tetris\\TetrisBoard.ts"],"names":[],"mappings":";;;;;;AAAA,6CAAsC;AAGhC,IAAA,KAAwB,EAAE,CAAC,UAAU,EAAnC,OAAO,aAAA,EAAE,QAAQ,cAAkB,CAAC;AAG5C;IAA2B,yBAAY;IAAvC;QAAA,qEAwRC;QArRW,aAAO,GAAW,CAAC,CAAC;QAEpB,iBAAW,GAAc,IAAI,CAAC;QAE9B,eAAS,GAAW,CAAC,CAAC;QAGtB,aAAO,GAAY,KAAK,CAAC;QACzB,cAAQ,GAAW,CAAC,CAAC;QACrB,aAAO,GAAW,CAAC,CAAC;QACpB,eAAS,GAAW,CAAC,CAAC;QAGtB,YAAM,GAAG;YACb,GAAG,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;YAChB,MAAM,EAAE,IAAI;YACZ,KAAK,EAAE,CAAC;SACX,CAAC;QACM,eAAS,GAAW,GAAG,CAAC;;IAmQpC,CAAC;IAhQG,sBAAM,GAAN;QACI,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC;QAChD,wDAAwD;QACxD,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;QACtD,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACnB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC,EAAE,EAAE;YACnC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;YACtB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC,EAAE,EAAE;gBACnC,IAAI,SAAS,GAAG,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gBACjD,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;gBAC9B,SAAS,CAAC,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC;gBACjC,SAAS,CAAC,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC;gBAClC,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC,KAAK,GAAG,CAAC,CAAC;gBACvD,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;gBACxD,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,YAAY,CAAC,mBAAK,CAAC,CAAC;aACvD;SACJ;IACL,CAAC;IAED,oBAAI,GAAJ,UAAK,WAAwB;QACzB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACnC,CAAC;IAED,qBAAK,GAAL;QACI,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QAC3D,IAAI,CAAC,WAAW,EAAE,CAAC;QACnB,IAAI,CAAC,KAAK,EAAE,CAAC;QACb,IAAI,CAAC,IAAI,EAAE,CAAC;QACZ,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;IACxB,CAAC;IAED,oBAAI,GAAJ;QACI,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;IACzB,CAAC;IAEO,qBAAK,GAAb;QACI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC,EAAE,EAAE;YACnC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC,EAAE,EAAE;gBACnC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;aAC9B;SACJ;IACL,CAAC;IAEO,4BAAY,GAApB,UAAqB,CAAS,EAAE,CAAS;QACrC,IAAM,MAAM,GAAG,EAAE,CAAC;QAClB,OAAO,CAAC,EAAE,EAAE;YACR,MAAM,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;SACrC;QACD,OAAO,MAAM,CAAC;IAClB,CAAC;IAEO,0BAAU,GAAlB,UAAmB,MAAkB,EAAE,MAAe;QAAtD,iBAQC;QAPG,MAAM,CAAC,OAAO,CAAC,UAAC,GAAG,EAAE,CAAC;YAClB,GAAG,CAAC,OAAO,CAAC,UAAC,KAAK,EAAE,CAAC;gBACjB,IAAI,KAAK,KAAK,CAAC,EAAE;oBACb,KAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;iBACpD;YACL,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,oBAAI,GAAZ;QACI,IAAI,CAAC,KAAK,EAAE,CAAC;QACb,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACzC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IACzD,CAAC;IAED,2BAAW,GAAX;QACI,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACtD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC;QAC7D,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC;YAClD,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QACvC,IAAI,IAAI,CAAC,OAAO,EAAE,EAAE;YAChB,0CAA0C;YAC1C,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAC7C,yBAAyB;SAC5B;QACD,IAAG,IAAI,CAAC,MAAM,EAAE,GAAC,IAAI,EAAE;YACnB,IAAI,CAAC,SAAS,GAAG,GAAG,CAAC;SACxB;aAAI;YACD,IAAM,MAAM,GAAG,UAAU,CAAC;YAC1B,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC;SAC9D;QACD,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAChD,CAAC;IAED,0BAAU,GAAV;QACI,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;QACpB,IAAI,IAAI,CAAC,OAAO,EAAE,EAAE;YAChB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;YACpB,IAAI,CAAC,KAAK,EAAE,CAAC;YACb,IAAI,CAAC,WAAW,EAAE,CAAC;YACnB,IAAI,CAAC,UAAU,EAAE,CAAC;YAClB,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;SACnD;QACD,IAAI,CAAC,IAAI,EAAE,CAAC;IAChB,CAAC;IAED,0BAAU,GAAV,UAAW,MAAc;QACrB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,MAAM,CAAC;QAC5B,IAAI,IAAI,CAAC,OAAO,EAAE,EAAE;YAChB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,MAAM,CAAC;SAC/B;QACD,IAAI,CAAC,IAAI,EAAE,CAAC;IAChB,CAAC;IAED,4BAAY,GAAZ,UAAa,GAAW;QACpB,IAAM,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;QAC9B,IAAI,MAAM,GAAG,CAAC,CAAC;QACf,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC;QACtC,OAAO,IAAI,CAAC,OAAO,EAAE,EAAE;YACnB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,MAAM,CAAC;YAC5B,MAAM,GAAG,CAAC,CAAC,MAAM,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC3C,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE;gBACpC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;gBACrC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC;gBACxB,OAAO;aACV;SACJ;QACD,IAAI,CAAC,IAAI,EAAE,CAAC;IAChB,CAAC;IAED,0BAAU,GAAV;QACI,IAAI,QAAQ,GAAG,CAAC,CAAC;QACjB,KAAK,EAAE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;YACnD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAC3C,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE;oBACxB,SAAS,KAAK,CAAC;iBAClB;aACJ;YACD,IAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC/C,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACrB,CAAC,EAAE,CAAC;YAEJ,IAAI,CAAC,MAAM,CAAC,KAAK,IAAI,QAAQ,GAAG,EAAE,CAAC;YACnC,QAAQ,IAAI,CAAC,CAAC;SACjB;IACL,CAAC;IAED,uBAAO,GAAP;QACI,IAAM,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;QAC7B,IAAM,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;QAC1B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC/B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAClC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;oBACb,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;wBAChB,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE;oBACzC,OAAO,IAAI,CAAC;iBACf;aACJ;SACJ;QACD,OAAO,KAAK,CAAC;IACjB,CAAC;IAED,qBAAK,GAAL;QAAA,iBAQC;QAPG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,UAAC,GAAG,EAAE,CAAC;YAC9B,GAAG,CAAC,OAAO,CAAC,UAAC,KAAK,EAAE,CAAC;gBACjB,IAAI,KAAK,KAAK,CAAC,EAAE;oBACb,KAAI,CAAC,KAAK,CAAC,CAAC,GAAG,KAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,KAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;iBACpE;YACL,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;IAED,sBAAM,GAAN,UAAO,MAAkB,EAAE,GAAW;;QAClC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACpC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;gBACxB,KAGI;oBACI,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBACZ,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;iBACf,EALD,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAA,EACZ,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAA,CAIV;aACT;SACJ;QAED,IAAI,GAAG,GAAG,CAAC,EAAE;YACT,MAAM,CAAC,OAAO,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,OAAO,EAAE,EAAb,CAAa,CAAC,CAAC;SACxC;aAAM;YACH,MAAM,CAAC,OAAO,EAAE,CAAC;SACpB;IACL,CAAC;IAEO,2BAAW,GAAnB,UAAoB,IAAY;QAC5B,IAAI,IAAI,KAAK,GAAG,EAAE;YACd,OAAO;gBACH,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;gBACZ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;gBACZ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;gBACZ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;aACf,CAAC;SACL;aAAM,IAAI,IAAI,KAAK,GAAG,EAAE;YACrB,OAAO;gBACH,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;gBACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;gBACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;aACZ,CAAC;SACL;aAAM,IAAI,IAAI,KAAK,GAAG,EAAE;YACrB,OAAO;gBACH,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;gBACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;gBACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;aACZ,CAAC;SACL;aAAM,IAAI,IAAI,KAAK,GAAG,EAAE;YACrB,OAAO;gBACH,CAAC,CAAC,EAAE,CAAC,CAAC;gBACN,CAAC,CAAC,EAAE,CAAC,CAAC;aACT,CAAC;SACL;aAAM,IAAI,IAAI,KAAK,GAAG,EAAE;YACrB,OAAO;gBACH,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;gBACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;gBACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;aACZ,CAAC;SACL;aAAM,IAAI,IAAI,KAAK,GAAG,EAAE;YACrB,OAAO;gBACH,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;gBACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;gBACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;aACZ,CAAC;SACL;aAAM,IAAI,IAAI,KAAK,GAAG,EAAE;YACrB,OAAO;gBACH,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;gBACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;gBACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;aACZ,CAAC;SACL;aAAM,IAAI,IAAI,KAAK,GAAG,EAAE;YACrB,OAAO;gBACH,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;gBACP,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;gBACP,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;aACV,CAAA;SACJ;aAAM,IAAI,IAAI,KAAK,GAAG,EAAE;YACrB,OAAO;gBACH,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;gBACf,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;gBACf,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;gBACf,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;gBACf,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;gBACf,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;gBACf,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;aAClB,CAAC,OAAO,EAAE,CAAC;SACf;IACL,CAAC;IAED,sBAAM,GAAN,UAAO,EAAU;QACb,IAAI,IAAI,CAAC,OAAO,EAAE;YACd,IAAI,CAAC,QAAQ,IAAI,EAAE,CAAC;YACpB,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,SAAS,EAAE;gBACjC,IAAI,CAAC,UAAU,EAAE,CAAC;gBAClB,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;aACrB;SACJ;IACL,CAAC;IAnRD;QADC,QAAQ,CAAC,EAAE,CAAC,OAAO,CAAC;0CACO;IAE5B;QADC,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC;8CACkB;IAEtC;QADC,QAAQ,CAAC,EAAE,CAAC,KAAK,CAAC;4CACW;IAPrB,KAAK;QADjB,OAAO;OACK,KAAK,CAwRjB;IAAD,YAAC;CAxRD,AAwRC,CAxR0B,EAAE,CAAC,SAAS,GAwRtC;AAxRY,sBAAK","file":"","sourceRoot":"/","sourcesContent":["import { Piece } from \"./TetrisPiece\";\nimport { TetrisScene } from \"./TetrisScene\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport class Board extends cc.Component {\n\n    @property(cc.Integer)\n    private colsNum: number = 0;\n    @property(cc.Prefab)\n    private piecePrefab: cc.Prefab = null;\n    @property(cc.Float)\n    private frameTime: number = 1;\n\n    private tetrisScene: TetrisScene;\n    private isStart: boolean = false;\n    private pastTime: number = 0;\n    private rowsNum: number = 0;\n    private gridWidth: number = 0;\n    private pieceMap: Piece[][];\n    private arena: number[][];\n    private player = {\n        pos: cc.v2(0, 0),\n        matrix: null,\n        score: 0,\n    };\n    private nextBlock: string = \"囧\";\n\n\n    onLoad() {\n        this.gridWidth = this.node.width / this.colsNum;\n        // this.rowsNum = this.node.height / this.gridWidth | 0;\n        this.rowsNum = cc.winSize.height / this.gridWidth | 0;\n        this.pieceMap = [];\n        for (let y = 0; y < this.rowsNum; y++) {\n            this.pieceMap[y] = [];\n            for (let x = 0; x < this.colsNum; x++) {\n                let pieceNode = cc.instantiate(this.piecePrefab);\n                this.node.addChild(pieceNode);\n                pieceNode.width = this.gridWidth;\n                pieceNode.height = this.gridWidth;\n                pieceNode.x = x * this.gridWidth + pieceNode.width / 2;\n                pieceNode.y = y * this.gridWidth + pieceNode.height / 2;\n                this.pieceMap[y][x] = pieceNode.getComponent(Piece);\n            }\n        }\n    }\n\n    init(tetrisScene: TetrisScene) {\n        this.tetrisScene = tetrisScene;\n    }\n\n    reset() {\n        this.arena = this.createMatrix(this.colsNum, this.rowsNum);\n        this.playerReset();\n        this.clear();\n        this.draw();\n        this.isStart = true;\n    }\n\n    stop() {\n        this.isStart = false;\n    }\n\n    private clear() {\n        for (let y = 0; y < this.rowsNum; y++) {\n            for (let x = 0; x < this.colsNum; x++) {\n                this.pieceMap[y][x].hide();\n            }\n        }\n    }\n\n    private createMatrix(w: number, h: number) {\n        const matrix = [];\n        while (h--) {\n            matrix.push(new Array(w).fill(0));\n        }\n        return matrix;\n    }\n\n    private drawMatrix(matrix: number[][], offset: cc.Vec2) {\n        matrix.forEach((row, y) => {\n            row.forEach((value, x) => {\n                if (value !== 0) {\n                    this.pieceMap[y + offset.y][x + offset.x].show();\n                }\n            });\n        });\n    }\n\n    private draw() {\n        this.clear();\n        this.drawMatrix(this.arena, cc.v2(0, 0));\n        this.drawMatrix(this.player.matrix, this.player.pos);\n    }\n\n    playerReset() {\n        this.player.matrix = this.createBlock(this.nextBlock);\n        this.player.pos.y = this.rowsNum - this.player.matrix.length;\n        this.player.pos.x = (this.arena[0].length / 2 | 0) -\n        (this.player.matrix[0].length / 2 | 0);\n        if (this.collide()) {\n            // this.arena.forEach(row => row.fill(0));\n            this.tetrisScene.stopGame(this.player.score);\n            // this.player.score = 0;\n        }\n        if(Math.random()<0.01) {\n            this.nextBlock = \"囧\";\n        }else{\n            const blocks = 'TJLOSZIX';\n            this.nextBlock = blocks[blocks.length * Math.random() | 0];\n        }\n        this.tetrisScene.updateHint(this.nextBlock);\n    }\n\n    playerDrop() {\n        this.player.pos.y--;\n        if (this.collide()) {\n            this.player.pos.y++;\n            this.merge();\n            this.playerReset();\n            this.arenaSweep();\n            this.tetrisScene.updateScore(this.player.score);\n        }\n        this.draw();\n    }\n\n    playerMove(offset: number) {\n        this.player.pos.x += offset;\n        if (this.collide()) {\n            this.player.pos.x -= offset;\n        }\n        this.draw();\n    }\n\n    playerRotate(dir: number) {\n        const pos = this.player.pos.x;\n        let offset = 1;\n        this.rotate(this.player.matrix, -dir);\n        while (this.collide()) {\n            this.player.pos.x += offset;\n            offset = -(offset + (offset > 0 ? 1 : -1));\n            if (offset > this.player.matrix.length) {\n                this.rotate(this.player.matrix, dir);\n                this.player.pos.x = pos;\n                return;\n            }\n        }\n        this.draw();\n    }\n\n    arenaSweep() {\n        let rowCount = 1;\n        outer: for (let y = 0; y < this.arena.length - 1; y++) {\n            for (let x = 0; x < this.arena[y].length; x++) {\n                if (this.arena[y][x] === 0) {\n                    continue outer;\n                }\n            }\n            const row = this.arena.splice(y, 1)[0].fill(0);\n            this.arena.push(row);\n            y--;\n\n            this.player.score += rowCount * 10;\n            rowCount *= 2;\n        }\n    }\n\n    collide(): boolean {\n        const m = this.player.matrix;\n        const o = this.player.pos;\n        for (let y = 0; y < m.length; y++) {\n            for (let x = 0; x < m[y].length; x++) {\n                if (m[y][x] !== 0 &&\n                    (this.arena[y + o.y] &&\n                        this.arena[y + o.y][x + o.x]) !== 0) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    merge() {\n        this.player.matrix.forEach((row, y) => {\n            row.forEach((value, x) => {\n                if (value !== 0) {\n                    this.arena[y + this.player.pos.y][x + this.player.pos.x] = value;\n                }\n            });\n        });\n    }\n\n    rotate(matrix: number[][], dir: number) {\n        for (let y = 0; y < matrix.length; y++) {\n            for (let x = 0; x < y; x++) {\n                [\n                    matrix[x][y],\n                    matrix[y][x]\n                ] = [\n                        matrix[y][x],\n                        matrix[x][y]\n                    ];\n            }\n        }\n\n        if (dir > 0) {\n            matrix.forEach(row => row.reverse());\n        } else {\n            matrix.reverse();\n        }\n    }\n\n    private createBlock(type: string): number[][] {\n        if (type === 'I') {\n            return [\n                [0, 1, 0, 0],\n                [0, 1, 0, 0],\n                [0, 1, 0, 0],\n                [0, 1, 0, 0],\n            ];\n        } else if (type === 'L') {\n            return [\n                [0, 2, 0],\n                [0, 2, 0],\n                [0, 2, 2],\n            ];\n        } else if (type === 'J') {\n            return [\n                [0, 3, 0],\n                [0, 3, 0],\n                [3, 3, 0],\n            ];\n        } else if (type === 'O') {\n            return [\n                [4, 4],\n                [4, 4],\n            ];\n        } else if (type === 'Z') {\n            return [\n                [5, 5, 0],\n                [0, 5, 5],\n                [0, 0, 0],\n            ];\n        } else if (type === 'S') {\n            return [\n                [0, 6, 6],\n                [6, 6, 0],\n                [0, 0, 0],\n            ];\n        } else if (type === 'T') {\n            return [\n                [0, 7, 0],\n                [7, 7, 7],\n                [0, 0, 0],\n            ];\n        } else if( type === 'X') {\n            return [\n                [1,0,1],\n                [0,1,0],\n                [1,0,1],\n            ]\n        } else if (type === '囧') {\n            return [\n                [1,1,1,1,1,1,1],\n                [1,0,1,0,1,0,1],\n                [1,1,0,0,0,1,1],\n                [1,0,0,0,0,0,1],\n                [1,0,1,1,1,0,1],\n                [1,0,1,0,1,0,1],\n                [1,1,1,1,1,1,1],\n            ].reverse();\n        }\n    }\n\n    update(dt: number) {\n        if (this.isStart) {\n            this.pastTime += dt;\n            if (this.pastTime >= this.frameTime) {\n                this.playerDrop();\n                this.pastTime = 0;\n            }\n        }\n    }\n\n}"]}