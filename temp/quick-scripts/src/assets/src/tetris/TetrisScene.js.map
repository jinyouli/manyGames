{"version":3,"sources":["assets\\src\\tetris\\TetrisScene.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { Board } from \"./TetrisBoard\";\nimport { STATE } from \"./TetrisConstants\";\nimport { G } from \"../G\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport class TetrisScene extends cc.Component {\n\n    @property(Board)\n    private board: Board = null;\n    @property(cc.Label)\n    private scoreLabel: cc.Label = null;\n    @property(cc.Label)\n    private nextLabel: cc.Label = null;\n\n    private state:STATE = STATE.NONE;\n\n    start() {\n        this.addListeners();\n        this.board.init(this);\n        this.startGame();\n    }\n\n    startGame() {\n        this.state = STATE.START;\n        this.board.reset();\n        this.updateScore(0);\n    }\n\n    stopGame(score: number) {\n        this.state = STATE.OVER;\n        this.board.stop();\n        G.gameRoot.showMaskMessage(\"无聊指数：\"+score,\n        {\n            label: \"再来\", cb: () => {\n                this.startGame();\n            }, target: this\n        },\n        {\n            label: \"溜了\", cb: () => {\n                G.returnHall();\n            }, target: this\n        });\n    }\n\n    updateScore(score: number) {\n        this.scoreLabel.string = score + \"\";\n    }\n\n    updateHint(hint: string) {\n        this.nextLabel.string = hint;\n    }\n\n    onBtnExit() {\n        this.board.stop();\n        G.returnHall();\n    }\n\n    onBtnLeft() {\n        if(this.state === STATE.START) {\n            this.board.playerMove(-1);\n        }\n    }\n\n    onBtnRight() {\n        if(this.state === STATE.START) {\n            this.board.playerMove(1);\n        }\n    }\n\n    onBtnRotate() {\n        if(this.state === STATE.START) {\n            this.board.playerRotate(1);\n        }\n    }\n\n    onBtnDrop() {\n        if(this.state === STATE.START) {\n            this.board.playerDrop();\n        }\n    }\n\n    private addListeners() {\n        this.board.node.on(cc.Node.EventType.TOUCH_END, (event: cc.Touch) => {\n            let startPos = event.getStartLocation();\n            let endPos = event.getLocation();\n            let offsetX = endPos.x - startPos.x;\n            let offsetY = endPos.y - startPos.y;\n            if (Math.abs(offsetX) > Math.abs(offsetY)) {\n                if (offsetX > 0) {\n                    this.onBtnRight();\n                } else {\n                    this.onBtnLeft();\n                }\n            } else {\n                if (offsetY > 0) {\n                    this.onBtnRotate();\n                } else {\n                    this.onBtnDrop();\n                }\n            }\n        }, this);\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, (event) => {\n            switch ((event as any).keyCode) {\n                case cc.KEY.left:\n                case cc.KEY.a:\n                    this.onBtnLeft();\n                    break;\n                case cc.KEY.right:\n                case cc.KEY.d:\n                    this.onBtnRight();\n                    break;\n                case cc.KEY.up:\n                case cc.KEY.w:\n                    this.onBtnRotate();\n                    break;\n                case cc.KEY.down:\n                case cc.KEY.s:\n                    this.onBtnDrop();\n                    break;\n            }\n        }, this);\n    }\n}"]}