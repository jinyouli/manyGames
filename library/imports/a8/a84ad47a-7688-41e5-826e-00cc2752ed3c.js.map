{"version":3,"sources":["assets\\src\\snake\\SnakeBoard.ts"],"names":[],"mappings":";;;;;AAAA,mDAAyD;AACzD,2CAAqC;AAG/B,IAAA,KAAwB,EAAE,CAAC,UAAU,EAAnC,OAAO,aAAA,EAAE,QAAQ,cAAkB,CAAC;AAG5C;IAAmC,yBAAY;IAA/C;QAAA,qEAyMC;QAxM+B,eAAS,GAAG,GAAG,CAAC;QAChB,gBAAU,GAAG,IAAI,CAAC;QACjB,iBAAW,GAAc,IAAI,CAAC;QAChC,YAAM,GAAY,IAAI,CAAC;QAE3C,aAAO,GAAG,KAAK,CAAC;QACf,cAAQ,GAAG,CAAC,CAAC;QACb,aAAO,GAAW,EAAE,CAAC;QACrB,aAAO,GAAW,EAAE,CAAC;QACrB,eAAS,GAAW,CAAC,CAAC;QAGtB,aAAO,GAAG,0BAAS,CAAC,KAAK,CAAC;QAC3B,WAAK,GAAG,CAAC,CAAC;QAET,gBAAU,GAAe,IAAI,CAAC;;QAgLtC,uBAAuB;QACvB,0BAA0B;QAC1B,+BAA+B;QAC/B,iFAAiF;QACjF,gCAAgC;QAChC,iCAAiC;QACjC,YAAY;QACZ,QAAQ;QACR,IAAI;IACR,CAAC;IAvLG,sBAAM,GAAN;QACI,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC;QAClD,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACnB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC,EAAE,EAAE;YACnC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;YACtB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC,EAAE,EAAE;gBACnC,IAAI,SAAS,GAAG,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gBACjD,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;gBAChC,SAAS,CAAC,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC;gBACjC,SAAS,CAAC,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC;gBAClC,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC,KAAK,GAAG,CAAC,CAAC;gBACvD,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;gBACxD,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,YAAY,CAAC,kBAAK,CAAC,CAAC;gBACpD,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;gBAC1B,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;aAC7B;SACJ;IAEL,CAAC;IAED,0BAAU,GAAV;QACI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAClC,IAAI,IAAI,GAAG,IAAI,CAAC,SAAS,GAAG,CAAC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC;QAC3D,IAAI,IAAI,GAAG,GAAG,EAAE;YACZ,IAAI,GAAG,GAAG,CAAC;SACd;QACD,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;IAC1C,CAAC;IAED,2BAAW,GAAX;QACI,IAAI,IAAI,CAAC,OAAO,EAAE;YACd,IAAI,CAAC,SAAS,EAAE,CAAC;SACpB;IACL,CAAC;IAED,oBAAI,GAAJ,UAAK,UAAsB;QACvB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IACjC,CAAC;IAED,yBAAS,GAAT;QACI,IAAI,CAAC,KAAK,EAAE,CAAC;QACb,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;YACzB,IAAI,CAAC,OAAO,EAAE,CAAC;SAClB;QACD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,UAAU,EAAE,CAAC;IACtB,CAAC;IAED,qBAAK,GAAL;QACI,IAAI,CAAC,KAAK,EAAE,CAAC;QACb,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;QAChB,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,2BAAU,CAAC,UAAU,EAAE,0BAAS,CAAC,KAAK,EAAE,0BAAS,CAAC,KAAK,CAAC,CAAC;QAClF,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,2BAAU,CAAC,UAAU,EAAE,0BAAS,CAAC,KAAK,EAAE,0BAAS,CAAC,KAAK,CAAC,CAAC;QAClF,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,2BAAU,CAAC,UAAU,EAAE,0BAAS,CAAC,KAAK,EAAE,0BAAS,CAAC,EAAE,CAAC,CAAC;QAC/E,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,2BAAU,CAAC,UAAU,EAAE,0BAAS,CAAC,EAAE,EAAE,0BAAS,CAAC,EAAE,CAAC,CAAC;QAC5E,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACrC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACrC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACrC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACrC,IAAI,CAAC,OAAO,GAAG,0BAAS,CAAC,KAAK,CAAC;QAC/B,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;IACnB,CAAC;IAED,uBAAO,GAAP;QACI,IAAI,SAAS,GAAY,EAAE,CAAC;QAC5B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC,EAAE,EAAE;YACnC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC,EAAE,EAAE;gBACnC,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,2BAAU,CAAC,KAAK,EAAE;oBAC/C,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;iBACvC;aACJ;SACJ;QACD,IAAI,WAAW,GAAG,SAAS,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;QACpE,WAAW,CAAC,IAAI,GAAG,2BAAU,CAAC,IAAI,CAAC;IACvC,CAAC;IAED,qBAAK,GAAL;QACI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC,EAAE,EAAE;YACnC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC,EAAE,EAAE;gBACnC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,2BAAU,CAAC,KAAK,CAAC;aAC/C;SACJ;IACL,CAAC;IAED,2BAAW,GAAX,UAAY,KAAa;QACrB,IAAI,KAAK,KAAK,IAAI,CAAC,KAAK,EAAE;YACtB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;YACnB,IAAI,CAAC,UAAU,EAAE,CAAC;SACrB;IACL,CAAC;IAED,yBAAS,GAAT,UAAU,GAAc;QACpB,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,CAAC,GAAG,EAAE;YAC/B,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC;SACtB;IACL,CAAC;IAED,yBAAS,GAAT;QACI,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACzB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;QAClC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC;QAC3B,IAAI,SAAgB,CAAC;QACrB,QAAQ,IAAI,CAAC,MAAM,EAAE;YACjB,KAAK,0BAAS,CAAC,EAAE;gBACb,IAAI,IAAI,CAAC,CAAC,KAAK,IAAI,CAAC,OAAO,GAAG,CAAC,EAAE;oBAC7B,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;iBACxC;qBAAM;oBACH,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;iBACjD;gBACD,MAAM;YACV,KAAK,0BAAS,CAAC,KAAK;gBAChB,IAAI,IAAI,CAAC,CAAC,KAAK,IAAI,CAAC,OAAO,GAAG,CAAC,EAAE;oBAC7B,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;iBACxC;qBAAM;oBACH,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;iBACjD;gBACD,MAAM;YACV,KAAK,0BAAS,CAAC,IAAI;gBACf,IAAI,IAAI,CAAC,CAAC,KAAK,CAAC,EAAE;oBACd,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC;iBACvD;qBAAM;oBACH,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;iBACjD;gBACD,MAAM;YACV,KAAK,0BAAS,CAAC,IAAI;gBACf,IAAI,IAAI,CAAC,CAAC,KAAK,CAAC,EAAE;oBACd,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;iBACvD;qBAAM;oBACH,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;iBACjD;gBACD,MAAM;SACb;QACD,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC;IACrC,CAAC;IAED,gCAAgB,GAAhB,UAAiB,SAAgB;QAC7B,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACzB,QAAQ,SAAS,CAAC,IAAI,EAAE;YACpB,KAAK,2BAAU,CAAC,UAAU,CAAC;YAC3B,KAAK,2BAAU,CAAC,UAAU;gBACtB,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;gBACrB,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC;gBAC3B,MAAM;YACV,KAAK,2BAAU,CAAC,IAAI;gBAChB,SAAS,CAAC,IAAI,CAAC,2BAAU,CAAC,UAAU,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;gBAC/D,IAAI,CAAC,IAAI,CAAC,2BAAU,CAAC,UAAU,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;gBAC1D,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;gBAC9B,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE,CAAC;gBAC5B,MAAM;YACV,KAAK,2BAAU,CAAC,KAAK;gBACjB,IAAI,UAAQ,GAAG,EAAE,CAAC;gBAClB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,UAAC,KAAK,EAAE,KAAK;oBAC5B,QAAQ,KAAK,CAAC,IAAI,EAAE;wBAChB,KAAK,2BAAU,CAAC,UAAU;4BACtB,SAAS,CAAC,IAAI,CAAC,2BAAU,CAAC,UAAU,EAAE,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC;4BACjE,MAAM;wBACV,KAAK,2BAAU,CAAC,UAAU;4BACtB,SAAS,CAAC,IAAI,CAAC,2BAAU,CAAC,UAAU,EAAE,SAAS,CAAC,MAAM,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;4BACtE,MAAM;wBACV,KAAK,2BAAU,CAAC,UAAU;4BACtB,SAAS,CAAC,IAAI,CAAC,2BAAU,CAAC,UAAU,EAAE,SAAS,CAAC,MAAM,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;4BACtE,KAAK,CAAC,IAAI,GAAG,2BAAU,CAAC,KAAK,CAAC;4BAC9B,MAAM;qBACb;oBACD,UAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;oBACzB,SAAS,GAAG,KAAK,CAAC;gBACtB,CAAC,CAAC,CAAC;gBACH,kCAAkC;gBAElC,IAAI;gBACJ,IAAI,CAAC,KAAK,GAAG,UAAQ,CAAC;SAC7B;IACL,CAAC;IA7LmB;QAAnB,QAAQ,CAAC,EAAE,CAAC,KAAK,CAAC;4CAAyB;IACxB;QAAnB,QAAQ,CAAC,EAAE,CAAC,KAAK,CAAC;6CAA2B;IACzB;QAApB,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC;8CAAuC;IACxC;QAAlB,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAC;yCAAgC;IAJjC,KAAK;QADzB,OAAO;OACa,KAAK,CAyMzB;IAAD,YAAC;CAzMD,AAyMC,CAzMkC,EAAE,CAAC,SAAS,GAyM9C;kBAzMoB,KAAK","file":"","sourceRoot":"/","sourcesContent":["import { DIRECTION, PIECE_TYPE } from './SnakeConstants';\nimport { Piece } from './SnakePiece';\nimport { SnakeScene } from './SnakeScene';\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class Board extends cc.Component {\n    @property(cc.Float) private frameTime = 0.5;\n    @property(cc.Float) private levelRatio = 0.05;\n    @property(cc.Prefab) private piecePrefab: cc.Prefab = null;\n    @property(cc.Node) private layout: cc.Node = null;\n\n    public isStart = false;\n    private pastTime = 0;\n    private rowsNum: number = 16;\n    private colsNum: number = 16;\n    private gridWidth: number = 0;\n    private pieceMap: Piece[][];\n    private snake: Piece[];\n    private moveDir = DIRECTION.RIGHT;\n    public level = 0;\n\n    private snakeScene: SnakeScene = null;\n\n    onLoad() {\n        this.gridWidth = this.layout.width / this.colsNum;\n        this.pieceMap = [];\n        for (let x = 0; x < this.colsNum; x++) {\n            this.pieceMap[x] = [];\n            for (let y = 0; y < this.rowsNum; y++) {\n                let pieceNode = cc.instantiate(this.piecePrefab);\n                this.layout.addChild(pieceNode);\n                pieceNode.width = this.gridWidth;\n                pieceNode.height = this.gridWidth;\n                pieceNode.x = x * this.gridWidth + pieceNode.width / 2;\n                pieceNode.y = y * this.gridWidth + pieceNode.height / 2;\n                this.pieceMap[x][y] = pieceNode.getComponent(Piece);\n                this.pieceMap[x][y].x = x;\n                this.pieceMap[x][y].y = y;\n            }\n        }\n\n    }\n\n    updateTick() {\n        this.unschedule(this.tickHandler);\n        let time = this.frameTime - (this.levelRatio * this.level);\n        if (time < 0.1) {\n            time = 0.1;\n        }\n        this.schedule(this.tickHandler, time);\n    }\n\n    tickHandler() {\n        if (this.isStart) {\n            this.moveSnake();\n        }\n    }\n\n    init(snakeScene: SnakeScene) {\n        this.snakeScene = snakeScene;\n    }\n\n    startGame() {\n        this.reset();\n        for (let i = 0; i < 10; i++) {\n            this.addFood();\n        }\n        this.isStart = true;\n        this.updateTick();\n    }\n\n    reset() {\n        this.clear();\n        this.snake = [];\n        this.pieceMap[9][9].init(PIECE_TYPE.SNAKE_HEAD, DIRECTION.RIGHT, DIRECTION.RIGHT);\n        this.pieceMap[8][9].init(PIECE_TYPE.SNAKE_BODY, DIRECTION.RIGHT, DIRECTION.RIGHT);\n        this.pieceMap[7][9].init(PIECE_TYPE.SNAKE_BODY, DIRECTION.RIGHT, DIRECTION.UP);\n        this.pieceMap[7][8].init(PIECE_TYPE.SNAKE_TAIL, DIRECTION.UP, DIRECTION.UP);\n        this.snake.push(this.pieceMap[9][9]);\n        this.snake.push(this.pieceMap[8][9]);\n        this.snake.push(this.pieceMap[7][9]);\n        this.snake.push(this.pieceMap[7][8]);\n        this.moveDir = DIRECTION.RIGHT;\n        this.level = 0;\n    }\n\n    addFood() {\n        let blankList: Piece[] = [];\n        for (let x = 0; x < this.colsNum; x++) {\n            for (let y = 0; y < this.rowsNum; y++) {\n                if (this.pieceMap[x][y].type === PIECE_TYPE.BLANK) {\n                    blankList.push(this.pieceMap[x][y]);\n                }\n            }\n        }\n        let randomPiece = blankList[(Math.random() * blankList.length) | 0];\n        randomPiece.type = PIECE_TYPE.FOOD;\n    }\n\n    clear() {\n        for (let x = 0; x < this.colsNum; x++) {\n            for (let y = 0; y < this.rowsNum; y++) {\n                this.pieceMap[x][y].type = PIECE_TYPE.BLANK;\n            }\n        }\n    }\n\n    updateLevel(level: number) {\n        if (level !== this.level) {\n            this.level = level;\n            this.updateTick();\n        }\n    }\n\n    turnSnake(dir: DIRECTION) {\n        if (this.snake[0].outDir !== -dir) {\n            this.moveDir = dir;\n        }\n    }\n\n    moveSnake() {\n        let head = this.snake[0];\n        head.inDir = this.snake[1].outDir;\n        head.outDir = this.moveDir;\n        let nextPiece: Piece;\n        switch (head.outDir) {\n            case DIRECTION.UP:\n                if (head.y === this.rowsNum - 1) {\n                    nextPiece = this.pieceMap[head.x][0];\n                } else {\n                    nextPiece = this.pieceMap[head.x][head.y + 1];\n                }\n                break;\n            case DIRECTION.RIGHT:\n                if (head.x === this.colsNum - 1) {\n                    nextPiece = this.pieceMap[0][head.y];\n                } else {\n                    nextPiece = this.pieceMap[head.x + 1][head.y];\n                }\n                break;\n            case DIRECTION.DOWN:\n                if (head.y === 0) {\n                    nextPiece = this.pieceMap[head.x][this.rowsNum - 1];\n                } else {\n                    nextPiece = this.pieceMap[head.x][head.y - 1];\n                }\n                break;\n            case DIRECTION.LEFT:\n                if (head.x === 0) {\n                    nextPiece = this.pieceMap[this.colsNum - 1][head.y];\n                } else {\n                    nextPiece = this.pieceMap[head.x - 1][head.y];\n                }\n                break;\n        }\n        this.moveSnakeToPiece(nextPiece);\n    }\n\n    moveSnakeToPiece(nextPiece: Piece) {\n        let head = this.snake[0];\n        switch (nextPiece.type) {\n            case PIECE_TYPE.SNAKE_BODY:\n            case PIECE_TYPE.SNAKE_TAIL:\n                this.isStart = false;\n                this.snakeScene.overGame();\n                break;\n            case PIECE_TYPE.FOOD:\n                nextPiece.init(PIECE_TYPE.SNAKE_HEAD, head.outDir, head.inDir);\n                head.init(PIECE_TYPE.SNAKE_BODY, head.outDir, head.inDir);\n                this.snake.unshift(nextPiece);\n                this.snakeScene.onEatFood();\n                break;\n            case PIECE_TYPE.BLANK:\n                let newSnake = [];\n                this.snake.forEach((piece, index) => {\n                    switch (piece.type) {\n                        case PIECE_TYPE.SNAKE_HEAD:\n                            nextPiece.init(PIECE_TYPE.SNAKE_HEAD, piece.outDir, piece.inDir);\n                            break;\n                        case PIECE_TYPE.SNAKE_BODY:\n                            nextPiece.init(PIECE_TYPE.SNAKE_BODY, nextPiece.outDir, piece.outDir);\n                            break;\n                        case PIECE_TYPE.SNAKE_TAIL:\n                            nextPiece.init(PIECE_TYPE.SNAKE_TAIL, nextPiece.outDir, piece.outDir);\n                            piece.type = PIECE_TYPE.BLANK;\n                            break;\n                    }\n                    newSnake.push(nextPiece);\n                    nextPiece = piece;\n                });\n                // for (let piece of this.snake) {\n\n                // }\n                this.snake = newSnake;\n        }\n    }\n\n    // update(dt: number) {\n    //     if (this.isStart) {\n    //         this.pastTime += dt;\n    //         if (this.pastTime >= this.frameTime * (this.levelRatio**this.level)) {\n    //             this.moveSnake();\n    //             this.pastTime = 0;\n    //         }\n    //     }\n    // }\n}\n"]}